import os, asyncio, logging
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    ConversationHandler, filters
)

ASK_PHONE, ASK_NAME, ASK_CITY = range(3)
ADMIN_CHAT_ID = 245084180

async def start(update: Update, _):
    kb = ReplyKeyboardMarkup(
        [[KeyboardButton('üìû –û—Å—Ç–∞–≤–∏—Ç—å –∑–∞—è–≤–∫—É', request_contact=True)]],
        resize_keyboard=True, one_time_keyboard=True)
    await update.message.reply_text(
        '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –∏ –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å –Ω–æ–º–µ—Ä–æ–º –¥–ª—è –±–µ—Å–ø–ª–∞—Ç–Ω–æ–π –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏.',
        reply_markup=kb)
    return ASK_PHONE

async def phone(update: Update, context):
    phone = (update.message.contact.phone_number
             if update.message.contact else update.message.text)
    context.user_data['phone'] = phone
    await update.message.reply_text('–°–ø–∞—Å–∏–±–æ! –ö–∞–∫ –∫ –≤–∞–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è?')
    return ASK_NAME

async def name(update: Update, context):
    context.user_data['name'] = update.message.text
    await update.message.reply_text('–ò–∑ –∫–∞–∫–æ–≥–æ –≤—ã –≥–æ—Ä–æ–¥–∞?')
    return ASK_CITY

async def city(update: Update, context):
    context.user_data['city'] = update.message.text
    data = context.user_data
    await context.bot.send_message(
        ADMIN_CHAT_ID,
        f"–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞:\n–ò–º—è: {data['name']}\n–¢–µ–ª–µ—Ñ–æ–Ω: {data['phone']}\n–ì–æ—Ä–æ–¥: {data['city']}")
    await update.message.reply_text('–°–ø–∞—Å–∏–±–æ! –Æ—Ä–∏—Å—Ç —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏ —Å–µ–≥–æ–¥–Ω—è.')
    return ConversationHandler.END

async def main():
    logging.basicConfig(level=logging.INFO)
    app = Application.builder().token(os.getenv('TOKEN')).build()
    conv = ConversationHandler(
        [CommandHandler('start', start)],
        {ASK_PHONE: [MessageHandler(filters.CONTACT | filters.TEXT, phone)],
         ASK_NAME: [MessageHandler(filters.TEXT, name)],
         ASK_CITY: [MessageHandler(filters.TEXT, city)]},
        fallbacks=[CommandHandler('start', start)])
    app.add_handler(conv)
    await app.run_polling()

if __name__ == '__main__':
    asyncio.run(main())

